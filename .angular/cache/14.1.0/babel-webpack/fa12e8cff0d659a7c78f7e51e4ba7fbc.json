{"ast":null,"code":"import { environment } from '@environments/environment';\nimport { switchMap, tap } from 'rxjs/operators';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@services/token.service\";\nimport * as i3 from \"@services/me.service\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, tokenService, meService) {\n      this.http = http;\n      this.tokenService = tokenService;\n      this.meService = meService;\n      this.apiUrl = environment.API_URL; //con la primera llamada, creamos un estado general del getProfile(), para que cualquier componente pueda usar los datos del usuario logado y no tenga que llamar siempre a la api\n      //se carga en el layout.component.ts para que tenga acceso toda la zona privada\n\n      this.user$ = new BehaviorSubject(null);\n    }\n\n    getDataUser() {\n      return this.user$.getValue();\n    }\n\n    login(email, password) {\n      return this.http.post(`${this.apiUrl}/api/v1/auth/login`, {\n        email,\n        password\n      }).pipe( //antes de que me rediriga(que haga el subscribe de la funcion que llama a este login), quiero que me guarde el token\n      tap(response => {\n        this.tokenService.saveToken(response.access_token);\n        this.tokenService.saveRefreshToken(response.refresh_token);\n      }));\n    }\n\n    refreshToken(refreshToken) {\n      return this.http.post(`${this.apiUrl}/api/v1/auth/refresh-token`, {\n        refreshToken\n      }).pipe( //antes de que me rediriga(que haga el subscribe de la funcion que llama, quiero que me guarde el token\n      tap(response => {\n        this.tokenService.saveToken(response.access_token);\n        this.tokenService.saveRefreshToken(response.refresh_token);\n      }));\n      ;\n    }\n\n    register(name, email, password) {\n      return this.http.post(`${this.apiUrl}/api/v1/auth/register`, {\n        name,\n        email,\n        password\n      });\n    } //metodo para hacer el registro y hacer el login de 1\n\n\n    registerAndLogin(name, email, password) {\n      return this.register(name, email, password).pipe(switchMap(() => this.login(email, password)));\n    } //metodo para para confirmar si el usuario que se le pasa está activo o no, si esta activo te devuelve false\n\n\n    isAvailable(email) {\n      return this.http.post(`${this.apiUrl}/api/v1/auth/is-available`, {\n        email\n      });\n    } //metodo para iniciar proceso de recuperacion de psw, se envia correo a ese email\n\n\n    recovery(email) {\n      return this.http.post(`${this.apiUrl}/api/v1/auth/recovery`, {\n        email\n      });\n    } //metodo para cambiar la psw, tras acceder a la pag dandole click al link del email\n\n\n    changePassword(token, newPassword) {\n      return this.http.post(`${this.apiUrl}/api/v1/auth/change-password`, {\n        token,\n        newPassword\n      });\n    } //metodo para obtener datos del usuario logado\n    //de manera que cuando hace login, se hace la llamada al getProfile() para mostrar la info en el perfil del navbar, y guardamos de forma reactiva la info del perfil en userData$, y usamos esa\n    //variable para distribuir la info a los demas componentes que lo necesite\n    //{ context: checkToken() } es para enviar el token en la peticion con el interceptor\n\n\n    getProfile() {\n      return this.meService.getMeProfile().pipe( //antes que acabe, guarda datos del user\n      tap(user => {\n        this.user$.next(user);\n      }));\n    }\n\n    logout() {\n      this.tokenService.removeToken();\n      this.tokenService.removeRefreshToken();\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.TokenService), i0.ɵɵinject(i3.MeService));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}