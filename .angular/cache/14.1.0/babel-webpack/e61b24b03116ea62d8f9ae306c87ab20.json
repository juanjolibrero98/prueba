{"ast":null,"code":"/*! typescript-cookie v1.0.4 | MIT */\nvar index = /*#__PURE__*/Object.freeze({\n  __proto__: null\n});\n\nconst encodeName = name => encodeURIComponent(name).replace(/%(2[346B]|5E|60|7C)/g, decodeURIComponent).replace(/[()]/g, escape);\n\nconst encodeValue = value => {\n  return encodeURIComponent(value).replace(/%(2[346BF]|3[AC-F]|40|5[BDE]|60|7[BCD])/g, decodeURIComponent);\n};\n\nconst decodeName = decodeURIComponent;\n\nconst decodeValue = value => {\n  if (value[0] === '\"') {\n    value = value.slice(1, -1);\n  }\n\n  return value.replace(/(%[\\dA-F]{2})+/gi, decodeURIComponent);\n};\n\nfunction stringifyAttributes(attributes) {\n  // Copy incoming attributes as to not alter the original object..\n  attributes = Object.assign({}, attributes);\n\n  if (typeof attributes.expires === 'number') {\n    attributes.expires = new Date(Date.now() + attributes.expires * 864e5);\n  }\n\n  if (attributes.expires != null) {\n    attributes.expires = attributes.expires.toUTCString();\n  }\n\n  return Object.entries(attributes).filter(([key, value]) => value != null && value !== false) // Considers RFC 6265 section 5.2:\n  // ...\n  // 3.  If the remaining unparsed-attributes contains a %x3B (\";\")\n  //     character:\n  // Consume the characters of the unparsed-attributes up to,\n  // not including, the first %x3B (\";\") character.\n  // ...\n  .map(([key, value]) => value === true ? `; ${key}` : `; ${key}=${value.split(';')[0]}`).join('');\n}\n\nfunction get(name, decodeValue, decodeName) {\n  const scan = /(?:^|; )([^=]*)=([^;]*)/g;\n  const jar = {};\n  let match;\n\n  while ((match = scan.exec(document.cookie)) != null) {\n    try {\n      const found = decodeName(match[1]);\n      jar[found] = decodeValue(match[2], found);\n\n      if (name === found) {\n        break;\n      }\n    } catch (e) {}\n  }\n\n  return name != null ? jar[name] : jar;\n}\n\nconst DEFAULT_CODEC = Object.freeze({\n  decodeName: decodeName,\n  decodeValue: decodeValue,\n  encodeName: encodeName,\n  encodeValue: encodeValue\n});\nconst DEFAULT_ATTRIBUTES = Object.freeze({\n  path: '/'\n});\n\nfunction setCookie(name, value, attributes = DEFAULT_ATTRIBUTES, {\n  encodeValue: encodeValue$1 = encodeValue,\n  encodeName: encodeName$1 = encodeName\n} = {}) {\n  return document.cookie = `${encodeName$1(name)}=${encodeValue$1(value, name)}${stringifyAttributes(attributes)}`;\n}\n\nfunction getCookie(name, {\n  decodeValue: decodeValue$1 = decodeValue,\n  decodeName: decodeName$1 = decodeName\n} = {}) {\n  return get(name, decodeValue$1, decodeName$1);\n}\n\nfunction getCookies({\n  decodeValue: decodeValue$1 = decodeValue,\n  decodeName: decodeName$1 = decodeName\n} = {}) {\n  return get(undefined, decodeValue$1, decodeName$1);\n}\n\nfunction removeCookie(name, attributes = DEFAULT_ATTRIBUTES) {\n  setCookie(name, '', Object.assign({}, attributes, {\n    expires: -1\n  }));\n}\n\nfunction init(converter, defaultAttributes) {\n  const api = {\n    set: function (name, value, attributes) {\n      return setCookie(name, value, Object.assign({}, this.attributes, attributes), {\n        encodeValue: this.converter.write\n      });\n    },\n    get: function (name) {\n      if (arguments.length === 0) {\n        return getCookies(this.converter.read);\n      }\n\n      if (name == null) {\n        return;\n      }\n\n      return getCookie(name, this.converter.read);\n    },\n    remove: function (name, attributes) {\n      removeCookie(name, Object.assign({}, this.attributes, attributes));\n    },\n    withAttributes: function (attributes) {\n      return init(this.converter, Object.assign({}, this.attributes, attributes));\n    },\n    withConverter: function (converter) {\n      return init(Object.assign({}, this.converter, converter), this.attributes);\n    }\n  };\n  const config = {\n    attributes: {\n      value: Object.freeze(defaultAttributes)\n    },\n    converter: {\n      value: Object.freeze(converter)\n    }\n  };\n  return Object.create(api, config);\n}\n\nvar compat = init({\n  read: DEFAULT_CODEC.decodeValue,\n  write: DEFAULT_CODEC.encodeValue\n}, DEFAULT_ATTRIBUTES);\nexport { compat as Cookies, DEFAULT_ATTRIBUTES, DEFAULT_CODEC, index as Types, getCookie, getCookies, removeCookie, setCookie };","map":null,"metadata":{},"sourceType":"module"}