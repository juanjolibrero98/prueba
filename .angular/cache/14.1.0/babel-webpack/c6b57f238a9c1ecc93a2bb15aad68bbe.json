{"ast":null,"code":"import { HttpContextToken, HttpContext } from '@angular/common/http';\nimport { switchMap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@services/token.service\";\nimport * as i2 from \"@services/auth.service\";\nconst CHECK_TOKEN = new HttpContextToken(() => false);\nexport function checkToken() {\n  return new HttpContext().set(CHECK_TOKEN, true);\n}\nexport let TokenInterceptor = /*#__PURE__*/(() => {\n  class TokenInterceptor {\n    constructor(tokenService, authService) {\n      this.tokenService = tokenService;\n      this.authService = authService;\n    }\n\n    intercept(request, next) {\n      if (request.context.get(CHECK_TOKEN)) {\n        const isValidToken = this.tokenService.isValidToken(); // accessToken\n\n        if (isValidToken) {\n          return this.addToken(request, next);\n        } else {\n          return this.updateAccessTokenAndRefreshToken(request, next); //si token se vence, hace esto\n        }\n      }\n\n      return next.handle(request);\n    }\n\n    addToken(request, next) {\n      const accessToken = this.tokenService.getToken();\n\n      if (accessToken) {\n        const authRequest = request.clone({\n          headers: request.headers.set('Authorization', `Bearer ${accessToken}`)\n        });\n        return next.handle(authRequest); //es lo que permite que se ejecute la request modificado\n      }\n\n      return next.handle(request); //lo envia sin modificar el header\n    }\n\n    updateAccessTokenAndRefreshToken(request, next) {\n      const refreshToken = this.tokenService.getRefreshToken();\n      const isValidRefreshToken = this.tokenService.isValidRefreshToken();\n\n      if (refreshToken && isValidRefreshToken) {\n        return this.authService.refreshToken(refreshToken).pipe(switchMap(() => this.addToken(request, next)));\n      }\n\n      return next.handle(request);\n    }\n\n  }\n\n  TokenInterceptor.ɵfac = function TokenInterceptor_Factory(t) {\n    return new (t || TokenInterceptor)(i0.ɵɵinject(i1.TokenService), i0.ɵɵinject(i2.AuthService));\n  };\n\n  TokenInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TokenInterceptor,\n    factory: TokenInterceptor.ɵfac\n  });\n  return TokenInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}