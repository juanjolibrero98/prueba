{"ast":null,"code":"import { getCookie, setCookie, removeCookie } from 'typescript-cookie';\nimport jwt_decode from \"jwt-decode\";\nimport * as i0 from \"@angular/core\";\nexport let TokenService = /*#__PURE__*/(() => {\n  class TokenService {\n    constructor() {} // TokenService, para guardar el token de inicio de sesion, es el que nos va a decir si el usuario esta logeado o no y permitir dar acceso a la zona privada de la app\n\n\n    saveToken(token) {\n      setCookie('token-trello', token, {\n        expires: 365,\n        path: '/'\n      });\n    }\n\n    getToken() {\n      const token = getCookie('token-trello');\n      return token;\n    }\n\n    removeToken() {\n      removeCookie('token-trello');\n    }\n\n    removeRefreshToken() {\n      removeCookie('refresh-token-trello');\n    }\n\n    saveRefreshToken(token) {\n      setCookie('refresh-token-trello', token, {\n        expires: 365,\n        path: '/'\n      });\n    }\n\n    getRefreshToken() {\n      const token = getCookie('refresh-token-trello');\n      return token;\n    } //funcion que usa la libreria jwt-decode para comprobar la expiracion del token, y asi cerrar sesion usu si token expirado\n    //tmb sirve para comprobar si token esta activo y permitir el paso a la app, se usa en los guards\n\n\n    isValidToken() {\n      const token = this.getToken();\n\n      if (!token) {\n        return false;\n      }\n\n      const decodeToken = jwt_decode(token);\n\n      if (decodeToken && decodeToken?.exp) {\n        const tokenDate = new Date(0);\n        tokenDate.setUTCSeconds(decodeToken.exp);\n        const today = new Date();\n        return tokenDate.getTime() > today.getTime();\n      }\n\n      return false;\n    }\n\n    isValidRefreshToken() {\n      const token = this.getRefreshToken();\n\n      if (!token) {\n        return false;\n      }\n\n      const decodeToken = jwt_decode(token);\n\n      if (decodeToken && decodeToken?.exp) {\n        const tokenDate = new Date(0);\n        tokenDate.setUTCSeconds(decodeToken.exp);\n        const today = new Date();\n        return tokenDate.getTime() > today.getTime();\n      }\n\n      return false;\n    }\n\n  }\n\n  TokenService.ɵfac = function TokenService_Factory(t) {\n    return new (t || TokenService)();\n  };\n\n  TokenService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TokenService,\n    factory: TokenService.ɵfac,\n    providedIn: 'root'\n  });\n  return TokenService;\n})();","map":null,"metadata":{},"sourceType":"module"}